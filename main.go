package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"telegram-finance/storage"
)

var keyboard = tgbotapi.InlineKeyboardMarkup{}

func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(err)
		return
	}
	adminId, _ := strconv.ParseInt(os.Getenv("ADMIN_ID"), 10, 64)
	token := os.Getenv("TOKEN")

	db, err := storage.NewStorage("data/db.db")
	if err != nil {
		log.Println(err)
		return
	}
	defer db.CloseDB()
	if err := db.Init(); err != nil {
		log.Println(err)
		return
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = false
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

			if update.Message.IsCommand() {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

				//–∫–æ–º–∞–Ω–¥—ã
				//todo –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7,14,30 –¥–Ω–µ–π
				switch update.Message.Command() {
				case "start":
					msg.Text = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —É—á–µ—Ç–∞ —Ç–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤"
					if err := db.SaveUser(update.Message.Chat.ID, update.Message.Date, update.Message.From.UserName); err != nil {
						log.Println(err)
						return
					}
				case "sum":
					//todo –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
					year := time.Now().Year()
					month := time.Now().Month()

					all, err := db.GetSum(update.Message.Chat.ID, year, month)
					if err != nil {
						log.Println(err)
						return
					}
					if len(all) > 0 {
						msg.Text += fmt.Sprintf("–¢—Ä–∞—Ç—ã –∑–∞ %s\n", time.Now().Month().String())
						for _, data := range all {
							msg.Text += fmt.Sprintf(" %s			%v 	%s\n", data.Category, data.Data, data.Date.Local().Format("02/01/2006 15:04:05"))
						}
					} else {
						msg.Text += fmt.Sprintf("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ %s\n", month)
					}
				case "allsum":
					all, err := db.AllSum(update.Message.Chat.ID)
					if err != nil {
						log.Println(err)
						return
					}
					msg.Text += fmt.Sprintf("–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: %v\n", all)
				default:
					msg.Text += "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç"
				}

				//admin
				if update.Message.Chat.ID == adminId {
					msg.Text = ""
					switch update.Message.Command() {
					case "user":
						spl := strings.Split(update.Message.Text, " ")
						userId, _ := strconv.ParseInt(spl[1], 10, 64)
						all, c, err := db.GetUserInfo(userId)
						if err != nil {
							log.Println(err)
							return
						}
						regDate := time.Unix(int64(all.RegDate), 0).Format("02/01/2006 15:04:05")
						msg.Text += fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n–ò–º—è: @%v\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: %v\n", all.UserName, regDate, c)
					case "users":
						all, err := db.GetUsers()
						if err != nil {
							log.Println(err)
							return
						}
						msg.Text += fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n")
						for _, data := range all {
							msg.Text += fmt.Sprintf("–ò–º—è: @%v\nUserID: %v\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v\n\n", data.UserName, data.UserId, time.Unix(int64(data.RegDate), 0).Format("02/01/2006 15:04:05"))
						}
					case "deluser":
						spl := strings.Split(update.Message.Text, " ")
						userId, _ := strconv.ParseInt(spl[1], 10, 64)
						err := db.DeleteUser(userId)
						if err != nil {
							log.Println(err)
							return
						}
						msg.Text += fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %v —É–¥–∞–ª–µ–Ω\n", userId)
					case "deluserdata":
						spl := strings.Split(update.Message.Text, " ")
						userId, _ := strconv.ParseInt(spl[1], 10, 64)
						err := db.DeleteUserData(userId)
						if err != nil {
							log.Println(err)
							return
						}
						msg.Text += fmt.Sprintf("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %v —É–¥–∞–ª–µ–Ω—ã\n", userId)
					}
				}

				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
			}

			//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
			if num, ok := IsNumeric(update.Message.Text); ok {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
				keyboard = categoryKeyboard(num)
				msg.ReplyMarkup = keyboard
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
			}

		} else if update.CallbackQuery != nil {

			//todo –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–π
			if update.CallbackQuery.Data == "comment" {

			} else {
				spl := strings.Split(update.CallbackQuery.Data, ":")
				num, _ := strconv.Atoi(spl[1]) //todo –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
				if err := db.SaveData(num, spl[0], "", update.CallbackQuery.Message.Chat.ID); err != nil {
					log.Println(err)
					return
				}

				deleteMessageConfig := tgbotapi.DeleteMessageConfig{
					ChatID:    update.CallbackQuery.Message.Chat.ID,
					MessageID: update.CallbackQuery.Message.MessageID,
				}
				_, err := bot.Request(deleteMessageConfig)
				if err != nil {
					log.Println(err)
					return
				}

				mes := fmt.Sprintf("‚úÖÔ∏è –í–Ω–µ—Å–µ–Ω–æ %v –≤ %s \nüóì %s", num, spl[0], time.Unix(int64(update.CallbackQuery.Message.Date), 0).Format("02/01/2006 15:04:05"))
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, mes)
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "comment"),
					),
				)
				if _, err := bot.Send(msg); err != nil {
					log.Panic(err)
				}
			}
		}
	}
}

func IsNumeric(s string) (int, bool) {
	i, err := strconv.Atoi(s)
	if err == nil {
		return i, true
	}
	return 0, false
}

func categoryKeyboard(num int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üçî–ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞", fmt.Sprintf("üçî–ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞:%v", num)),
			tgbotapi.NewInlineKeyboardButtonData("üõí–ü—Ä–æ–¥—É–∫—Ç—ã", fmt.Sprintf("üõí–ü—Ä–æ–¥—É–∫—Ç—ã:%v", num)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè°–î–æ–º", fmt.Sprintf("üè°–î–æ–º:%v", num)),
			tgbotapi.NewInlineKeyboardButtonData("üöô–ú–∞—à–∏–Ω–∞", fmt.Sprintf("üöô–ú–∞—à–∏–Ω–∞:%v", num)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíä–ó–¥–æ—Ä–æ–≤—å–µ", fmt.Sprintf("üíä–ó–¥–æ—Ä–æ–≤—å–µ:%v", num)),
			tgbotapi.NewInlineKeyboardButtonData("üßô–õ–∏—á–Ω–æ–µ", fmt.Sprintf("üßô–õ–∏—á–Ω–æ–µ:%v", num)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëï–û–¥–µ–∂–¥–∞/—Ç–æ–≤–∞—Ä—ã", fmt.Sprintf("üëï–û–¥–µ–∂–¥–∞/—Ç–æ–≤–∞—Ä—ã:%v", num)),
			tgbotapi.NewInlineKeyboardButtonData("üåê–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/—Å–≤—è–∑—å", fmt.Sprintf("üåê–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/—Å–≤—è–∑—å:%v", num)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üé¢–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", fmt.Sprintf("üé¢–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:%v", num)),
			tgbotapi.NewInlineKeyboardButtonData("üåé–ü—Ä–æ—á–∏–µ", fmt.Sprintf("üåé–ü—Ä–æ—á–∏–µ:%v", num)),
		),
	)
}
