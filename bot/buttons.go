package bot

import (
	"fmt"
	"time"

	"github.com/NicoNex/echotron/v3"
)

func mainButtons() echotron.ReplyKeyboardMarkup {
	return echotron.ReplyKeyboardMarkup{
		Keyboard: [][]echotron.KeyboardButton{
			{
				{Text: "üìÑ –û—Ç—á–µ—Ç—ã"},
				//{Text: "üí∞ –î–æ–ª–≥–∏"}, //credit
			},
			{
				{Text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
			},
		},
		ResizeKeyboard: true,
	}
}

func reportButtons() echotron.ReplyKeyboardMarkup {
	return echotron.ReplyKeyboardMarkup{
		Keyboard: [][]echotron.KeyboardButton{
			{
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"},
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"},
			},
			{
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –æ–ø—Ä. –º–µ—Å—è—Ü"},
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –æ–ø—Ä. –º–µ—Å—è—Ü"},
			},
			{
				{Text: "üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"},
			},
			{
				{Text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
			},
		},
		ResizeKeyboard: true,
	}
}

func creditButtons() echotron.ReplyKeyboardMarkup {
	return echotron.ReplyKeyboardMarkup{
		Keyboard: [][]echotron.KeyboardButton{
			{
				{Text: "üí∞ –í—ã—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ª–≥"},
			},
			{
				{Text: "üí∞ –Ø –¥–æ–ª–∂–µ–Ω"},
				{Text: "üí∞ –ú–Ω–µ –¥–æ–ª–∂–Ω—ã"},
			},
			{
				{Text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
			},
		},
		ResizeKeyboard: true,
	}
}

func adminMainButtons() echotron.ReplyKeyboardMarkup {
	return echotron.ReplyKeyboardMarkup{
		Keyboard: [][]echotron.KeyboardButton{
			{
				{Text: "üìÑ –û—Ç—á–µ—Ç—ã"},
				//{Text: "üí∞ –î–æ–ª–≥–∏"}, //credit
			},
			{
				{Text: "–ê–¥–º–∏–Ω"},
			},
			{
				{Text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
			},
		},
		ResizeKeyboard: true,
	}
}

func adminReportButtons() echotron.ReplyKeyboardMarkup {
	return echotron.ReplyKeyboardMarkup{
		Keyboard: [][]echotron.KeyboardButton{
			{
				{Text: "üí∞ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥"},
				{Text: "üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è A"},
			},
			{
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü A"},
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º A"},
			},
			{
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –æ–ø—Ä. –º–µ—Å—è—Ü A"},
				{Text: "üí∞ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –æ–ø—Ä. –º–µ—Å—è—Ü A"},
			},
			{
				{Text: "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
			},
		},
		ResizeKeyboard: true,
	}
}

func settingsButtons() echotron.InlineKeyboardMarkup {
	return echotron.InlineKeyboardMarkup{
		InlineKeyboard: [][]echotron.InlineKeyboardButton{
			{
				{Text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–≤–∫–ª/–≤—ã–∫–ª)", CallbackData: "reminder"},
			},
			{
				{Text: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–ª–≥–∞—Ö (–≤–∫–ª/–≤—ã–∫–ª)", CallbackData: "remidnerDolg"},
			},
		},
	}
}

func yearsButtons() echotron.InlineKeyboardMarkup {
	nowYear := fmt.Sprintf("%v", time.Now().Year())
	lastYear := fmt.Sprintf("%v", time.Now().Year()-1)
	lastLastYear := fmt.Sprintf("%v", time.Now().Year()-2)
	lastLastYear2 := fmt.Sprintf("%v", time.Now().Year()-3)
	lastLastYear3 := fmt.Sprintf("%v", time.Now().Year()-4)
	return echotron.InlineKeyboardMarkup{
		InlineKeyboard: [][]echotron.InlineKeyboardButton{
			{
				{Text: nowYear, CallbackData: "year:" + nowYear},
			},
			{
				{Text: lastYear, CallbackData: "year:" + lastYear},
			},
			{
				{Text: lastLastYear, CallbackData: "year:" + lastLastYear},
			},
			{
				{Text: lastLastYear2, CallbackData: "year:" + lastLastYear2},
			},
			{
				{Text: lastLastYear3, CallbackData: "year:" + lastLastYear3},
			},
		},
	}
}

func monthButtons() echotron.InlineKeyboardMarkup {
	return echotron.InlineKeyboardMarkup{
		InlineKeyboard: [][]echotron.InlineKeyboardButton{
			{
				{Text: time.January.String(), CallbackData: fmt.Sprintf("month:%v", 1)},
				{Text: time.February.String(), CallbackData: fmt.Sprintf("month:%v", 2)},
			},
			{
				{Text: time.March.String(), CallbackData: fmt.Sprintf("month:%v", 3)},
				{Text: time.April.String(), CallbackData: fmt.Sprintf("month:%v", 4)},
			},
			{
				{Text: time.May.String(), CallbackData: fmt.Sprintf("month:%v", 5)},
				{Text: time.June.String(), CallbackData: fmt.Sprintf("month:%v", 6)},
			},
			{
				{Text: time.July.String(), CallbackData: fmt.Sprintf("month:%v", 7)},
				{Text: time.August.String(), CallbackData: fmt.Sprintf("month:%v", 8)},
			},
			{
				{Text: time.September.String(), CallbackData: fmt.Sprintf("month:%v", 9)},
				{Text: time.October.String(), CallbackData: fmt.Sprintf("month:%v", 10)},
			},
			{
				{Text: time.November.String(), CallbackData: fmt.Sprintf("month:%v", 11)},
				{Text: time.December.String(), CallbackData: fmt.Sprintf("month:%v", 12)},
			},
		},
	}
}

func categoriesButtons() echotron.InlineKeyboardMarkup {
	return echotron.InlineKeyboardMarkup{
		InlineKeyboard: [][]echotron.InlineKeyboardButton{
			{
				{Text: "üçî–ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞  ", CallbackData: `üçî–ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞  `},
				{Text: "üõí–ü—Ä–æ–¥—É–∫—Ç—ã      ", CallbackData: `üõí–ü—Ä–æ–¥—É–∫—Ç—ã      `},
			},
			{
				{Text: "üè°–î–æ–º           ", CallbackData: `üè°–î–æ–º           `},
				{Text: "üöô–ú–∞—à–∏–Ω–∞        ", CallbackData: `üöô–ú–∞—à–∏–Ω–∞        `},
			},
			{
				{Text: "üíä–ó–¥–æ—Ä–æ–≤—å–µ      ", CallbackData: `üíä–ó–¥–æ—Ä–æ–≤—å–µ      `},
				{Text: "üßô–õ–∏—á–Ω–æ–µ        ", CallbackData: `üßô–õ–∏—á–Ω–æ–µ        `},
			},
			{
				{Text: "üëï–û–¥–µ–∂–¥–∞/—Ç–æ–≤–∞—Ä—ã ", CallbackData: `üëï–û–¥–µ–∂–¥–∞/—Ç–æ–≤–∞—Ä—ã `},
				{Text: "üåê–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/—Å–≤—è–∑—å", CallbackData: `üåê–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/—Å–≤—è–∑—å`},
			},
			{
				{Text: "üé¢–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è   ", CallbackData: `üé¢–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è   `},
				{Text: "üåé–ü—Ä–æ—á–∏–µ        ", CallbackData: `üåé–ü—Ä–æ—á–∏–µ        `},
			},
			{
				{Text: "‚ùå–û—Ç–º–µ–Ω–∞", CallbackData: "cancelCategories"},
			},
		},
	}
}

func recordButtons(id int64) echotron.InlineKeyboardMarkup {
	return echotron.InlineKeyboardMarkup{
		InlineKeyboard: [][]echotron.InlineKeyboardButton{
			{
				{Text: "‚è¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", CallbackData: fmt.Sprintf("comment:%v", id)},
			},
			{
				{Text: "‚ùå –£–¥–∞–ª–∏—Ç—å", CallbackData: fmt.Sprintf("delRecord:%v", id)},
			},
		},
	}
}
